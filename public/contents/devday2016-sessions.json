{
    "12:00 - 13:00": [
        {
            "description": "Anmeldung"
        }
    ],
    "13:00 - 13:15": [
        {
            "room": "Hamburg",
            "description": "Er\u00f6ffnung durch Prof. Frank Sch\u00f6nefeld"
        }
    ],
    "13:15 - 14:15": [
        {
            "room": "Hamburg",
            "description": "Keynote (Englisch): The Rationale for Continuous Delivery",
            "speaker": "Dave Farley",
            "slideshare": {
                "key": "LIydla0m0gTfnP"
            },
            "youtube": {
                "key": "V_GdpGukQ4g"
            },
            "id": "dave_farley_1",
            "text": "<p>Many people working in software development spend their careers without seeing what good looks like. Our history is littered with inefficient processes creating poor quality output, too late to capitalise on the expected business value. How have we got to this state? How do we get past it? What does good really look like? Continuous Delivery changes the economics of software development, find out how and why.</p>",
            "feedback": "<p>In seiner Keynote hat Dave anschaulich dargelegt, wie man erfolgreich Services entwickelt: mit Hilfe der wichtigsten Erfindung der letzten 500 Jahre - der wissenschaftlichen Methode. Moderne Software-Systeme unterliegen der ununterbrochenen Anpassung an sich stetig ändernde Anforderungen. Wie kann man erfolgreich Verbesserungen erzielen? In dem man Hypothesen formuliert, die Software entsprechend der Hypothesen anpasst, und so schnell und klar wie möglich überprüft, ob die Hypothesen sich bestätigen oder widerlegen lassen. Wenn man ein solches Vorgehen mit herkömmlichen Entwicklungsprozessen versucht, kommt man nicht weit: wenn von der Idee bis zur Auswertung ein halbes Jahr oder mehr vergeht, haben sich bei Vorliegen des Ergebnisses die Rahmenbedingungen so weit geändert, das eine qualifizierte Beurteilung nicht mehr sinnvoll möglich ist. Das Ziel muss es also sein, inkrementelle Änderungen so schnell wie möglich überprüfbar zu machen. Also den Roundtrip zwischen Business-Idee und Umsetzung von Monaten auf Tage zu verkürzen. Der Weg dazu ist Continuous Delivery: die Automatisierung möglichst aller Schritte, die für die Qualitätssicherung und für das Ausrollen einer Änderung notwendig sind.</p>"
        }
    ],
    "14:15 - 14:30": [
        {
            "description": "kurze Pause"
        }
    ],
    "14:30 - 15:15": [
        {
            "description": "DevOps - Microsoft Developer Divisions Weg ins n\u00e4chste Agile Zeitalter",
            "speaker": "Artur Speth",
            "room": "Hamburg",
            "slideshare": {
                "key": "MOZ1ZKmgwcWaOU"
            },
            "youtube": {
                "key": "PKJsA3Nufcc"
            },
            "id": "artur_speth_1",
            "text": "<p>Märkte sind dynamischer denn je und Businessmodelle ändern sich. Oft unterstützt das Engineering nicht mehr ausreichend diese Dynamik, wodurch sich erhebliche Wettbewerbsnachteile ergeben können. Kürzere Zyklen und eine agile Kultur sind hierbei Schlüsselelemente für eine bessere Wertschöpfung, sind aber in großen Organisationen nicht trivial zu realisieren. Der Vortrag wird am Beispiel von Visual Studio Team Services die agile Transformation der Microsoft Developer Division hin zu einer DevOps-Kultur beschreiben und Ihnen einige Einblicke hinter die Kulissen gewähren, wie die Developer Division heute arbeitet.</p>",
            "feedback": "<p>Artur Speth zeigte in seinem Vortrag die Herausforderungen innerhalb von Microsoft bei der Umstellung auf agile Vorgehensweisen. Dabei musste die Transformation von über 35 weltweit verteilt sitzenden Entwicklerteams koordiniert werden. Dies geschah in mehreren Iterationen und natürlich nicht frei von Problemen und Konflikten.</p><ul><li>Durch die Umstellung konnte der Releasezyklus für das Produkt 'Visual Studio' von ca. zwei Jahren auf wenige Monate verkürzt werden.</li><li>Bugfixes und Featurewünsche können jetzt wesentlich schneller umgesetzt wereden. Alle Teams arbeiten in 3-Wochen Sprints.</li><li>Jedes Team ist für seine eigenen Bugs verantwortlich und muss diese fixen, bevor neue Features begonnen werden dürfen.</li><li>Reportings zu Sprintziel und Sprintreview (incl. Screenshots oder kurzen Videosequenzen) werden an einen großen hausinternen Verteiler geschickt, damit auch die Vorgesetzten nachvollziehen können, was geschafft wurde.</li><li>An einer Online Variante des Produkts werden neue Features ausprobiert, bevor sie in das 'echte' Produkt gehen.</p>"
        },
        {
            "description": "Continuous Delivery - Aber Sicher?!",
            "speaker": "Jan Dittberner",
            "room": "Gartensaal",
            "slideshare": {
                "key": "3GppXjxcDaAOik"
            },
            "id": "jan_dittberner_1",
            "text": "<p>Für kurze Entwicklungszyklen bei gleichbleibend hoher Qualität sind Continuous Integration und sinnvollerweise Continuous Delivery heutzutage wichtige Hilfsmittel.</p><p>Im Vortrag werde ich zeigen wie wir in einem relativ großen sicherheitsrelevanten Projekt damit umgehen, kontinuierlich Entwicklungs- und Testumgebungen bereitzustellen und dabei ein hohes Sicherheitsniveau gewährleisten können.</p><p>Dabei wird es technologisch um Jenkins, Puppet, den Umgang mit Zertifikaten und Keystores, die Umsetzung von Berechtigungen auf Betriebssystem- und Datenbankebene und daran angrenzende Themen gehen.</p>",
            "feedback": "<p>Kleine und große Projekte von der Entwicklung bis zum Delivery vollständig automatisieren? Sollen sich dabei Software-Artefakte und Module untereinander auch noch mit Zertifikaten authentisieren? Wie um die 500 Komponenten eines Projekt dies tun, wurde sehr plakativ und anschaulich in der Session gezeigt.</p>"
        },
        {
            "description": "Lose gekoppelt wie nie: DI vs. IoC",
            "speaker": "Hendrik L\u00f6sch",
            "room": "St. Petersburg",
            "slideshare": {
                "key": "WPXAyCGDNZHXa"
            },
            "id": "hendrik_loesch_1",
            "text": "<p>Dependency Injection, Service Locator, Inversion of Control, Dependency Inversion Principle, … Viele Begriffe die irgendwie das Gleiche zu sagen scheinen und sich dann doch wieder unterscheiden. Sicher ist nur, dass es sich um lose Kopplung handelt. Dass wir dank dieser ominösen Begriffe wartbare Software erstellen können, die leichter zu erweitern ist und sich darüber hinaus auch noch gut testen lässt.</p><p>Der Vortrag greift die zuvor genannten Begriffe auf und erläutert ihre Zusammenhänge. Dabei ist das Ziel mit altbekannten Vorurteilen aufzuräumen und bei der Entscheidung zu helfen wo Softwarebestandteile wirklich entkoppelt werden sollten und welche Antipatterns sich beim Praxiseinsatz ergeben können. Dabei sehen wir diverse Beispiele des Einsatzes der SOLID Prinzipien und warum Dependency Injection allein eben nicht zu besserer Software führt.</p>",
            "feedback": "<p>Back to the Basics. Hendrik widmete sich in seinem Talk einem Pfeiler stabiler Architekturen: die konsequnte Anwendung der SOLID-Prinzipien. Wie mit Dependency Injection eine lose Kopplung von Komponenten realisiert werden kann, hat offensichtlich eine Menge Entwickler und Architekten interessiert - der Raum war bis auf den letzten Platz besetzt.</p>"
        }
    ],
    "15:15 - 15:45": [
        {
            "description": "Kaffeepause"
        }
    ],
    "15:45 - 16:30": [
        {
            "description": "Acceptance Testing for Continuous Delivery",
            "speaker": "Dave Farley",
            "room": "Hamburg",
            "slideshare": {
                "key": "KQkgVjJNbUPa2"
            },
            "youtube": {
                "key": "I-fzJlH49G0"
            },
            "id": "dave_farley_2",
            "text": "<p>Writing and maintaining a suite acceptance tests that can give you a high level of confidence in the behaviour and configuration of your system is a complex task. In this talk Dave will describe approaches to acceptance testing that allow teams to: work quickly and effectively; build excellent functional coverage for complex enterprise-scale systems; manage and maintain those tests in the face of change, and of evolution in both the codebase and the understanding of the business problem.</p><p>This talk will answer the following questions, and more: How do you fail fast? How do you make your testing scalable? How do you isolate test cases from one-another? How do you maintain a working body of tests when you radically change the interface to your system?</p>",
            "feedback": "<p>Dave Farley beleuchtete in seinem spannenden Vortrag den Aspekt der Acceptance-Tests für Continuous Delivery. Mit Sätzen wie 'Regression Testing by Human Beings is a Waste of Human Beings' stellte er auch anknüpfend an seine Keynote noch einmal die Wichtigkeit automatisierter Tests klar. Nach seiner Darlegung sollten alle Testarten bis auf exploratives Testen automatisiert werden. Interessant war auch seine wichtige Aussage, dass auch der Testcode in der Verantwortung des Entwicklungsteams liegt, weil nur dieses die Änderungen am Code kennt und weiß, wie das erwartete Verhalten nach diesen Änderungen aussehen soll. Dies deckt sich auch mit eigenen positiven Erfahrungen in cross-funktionalen Teams aus aktuellen Projekten. Zum Abschluss fasste Dave noch einmal gute und schlechte Pattern für die Testautomatisierung zusammen.</p>"
        },
        {
            "description": "MIXING UP REALITIES \u2013 Mit AR, VR, AV zu neuen Realit\u00e4ten",
            "speaker": "Frank Lamack & Denis Loh",
            "room": "Gartensaal",
            "slideshare": {
                "key": "zZXFxzyxzeOUKs"
            },
            "id": "loh_lamack_1",
            "text": "<p>Mit der fortgeschrittenen Hardware-Miniaturisierung von ehemaligen Highperformance-Rechnern auf Taschengröße erheben sich 3D User Interfaces im Gewand von Smartphones zu einem zweiten Anlauf im Technology Hypecycle. Mit Augmented Reality, Virtual Reality, Augmented Virtuality oder einfach Mixed Reality ergeben sich spannende und auch herausfordernde Möglichkeiten, den digitalen Erfahrungsraum für uns zu erweitern. Wir stellen Technologien, Projekte und Erfahrungen vor.</p>",
            "feedback": "<p>Frank und Denis entführten uns in diesem Vortrag in die Mixed Reality und zeigten uns, wie sich mit Augmented Reality, Virtual Reality oder Augmented Virtuality spannende und auch herausfordernde Möglichkeiten ergeben, den digitalen Erfahrungsraum für uns zu erweitern. Sie demonstrierten an mehreren Beispielen, wie die Technologien in verschiedenen Anwendungsszenarien beim Kunden zum Einsatz kommen und ganz neue Wege, u.a. für die Beratung eröffnen.</p>"
        },
        {
            "description": "Testautomatisierungsframework Xeta",
            "speaker": "Peter Lehmann",
            "room": "St. Petersburg",
            "slideshare": {
                "key": "u7kSpVVwTxWtOf"
            },
            "id": "peter_lehmann_1",
            "text": "<p>Die Testautomatisierung spielt bei der Umsetzung von Softwareentwicklungsprojekten eine immer größere Rolle. Vor allem beim Einsatz eines Continuous-Integration-Prozesses ist sie unabdingbar. Schnelles Feedback über die Softwarequalität und eine hohe Testabdeckung sind dabei genauso wichtig wie die Stabilität der Tests. Oft müssen neben dem Frontend auch Backend-Schnittstellen wie Webservices betrachtet werden. Dafür wird ein umfangreiches Testframework benötigt, welches die gestellten Anforderungen erfüllt. In diesem Vortrag wird das Testautomatisierungsframework XETA vorgestellt, welches von der T-Systems Multimedia Solutions GmbH für eben diese hohen Ansprüche entwickelt wurde.</p>",
            "feedback": "<p>Dass konsequentes und automatisiertes Testen von Software hoher Qualität mehr als zuträglich ist, dürfte sich bis zum letzten Entwickler und Architekten herumgesprochen haben. Peter hat bei der MMS das Xeta-Framework entwickelt, mit dem sich sowohl Webanwendungen selbst als auch damit verbundene Dienste automatisiert testen lassen. Auf welche Herausforderungen und Probleme man dabei stoßen kann und wie man sie löst, hat er in seinem Talk vorgestellt. Da Xeta auf fertigen Bibliotheken wie Selenium aufsetzt ist und Standard-Tools wie Jenkins integriert sind, konnte jeder etwas über moderne Testframeworks mitnehmen - unabhängig davon, ob er Xeta einsetzen kann oder will.</p>"
        }
    ],
    "16:30 - 16:45": [
        {
            "description": "kurze Pause"
        }
    ],
    "16:45 - 17:30": [
        {
            "description": "Sicherheit der Dinge \u2013 \"Hacking im IoT\"",
            "speaker": "Thomas Haase",
            "room": "Hamburg",
            "slideshare": {
                "key": "tL5tCWxSe4fJ3u"
            },
            "id": "thomas_haase_1",
            "text": "<p>Im Rahmen der zunehmenden Digitalisierung und der einhergehenden Vernetzung geraten immer mehr kritische Infrastrukturen und die vernetzten Geräte in den Fokus krimineller Hacker. Früher waren die meisten viele dieser Netze von den öffentlichen Netzen / Internet strikt getrennt und von außen nicht erreichbar. Doch auch der Einzug digitaler Technologien und die damit einhergehende enge Integration externer Geschäftspartner und Kunden in die Wertschöpfungskette bergen für die Unternehmen neue Gefahren. Allerdings werden immer mehr Firmen im Rahmen des sogenannten „digitalen Darwinismus“ in eine Situation gebracht, wo sie gezwungen sind, etwaige Bedenken zu ignorieren.</p><p>Im Rahmen des Vortrages werden mögliche Gefahren und Probleme anhand des Tests der Infrastruktur eines Fußballstadions und der darin eingebundenen Geräte demonstriert. Anhand von Praxisbeispielen werden Schwachstellen / Programmierfehler bei der Entwicklung solcher Systeme aufgezeigt und mögliche Verbesserungsmaßnahmen diskutiert.</p>",
            "feedback": "<p>Thomas Haase, Security Tester bei der T-Systems Multimedia Solutions GmbH zeigte mit seiner sympathischen Art den Besuchern, wie wie unglaublich einfach es ist, vermeintliche Sicherheitssysteme, wie beispielsweise digitale Türschlösser zu hacken. Auch konnten wir sehen, was so diverse Steuerungsanlagen verschiedener Pumpen und Maschinen anzeigen. Getraut hat er sich dann doch nicht, Buttons auf den Systemen zu drücken - war vielleicht auch gut so. Der unausgesprochene Apell war eindeutig: 'Liebe Entwickler und Software-Architekten, schreibt nicht solche unsichere Software!' Selbst Adam Bien war beeindruckt.</p>"
        },
        {
            "description": "Cloud-Umgebungen mit Terraform verwalten",
            "speaker": "Sascha Askani",
            "room": "Gartensaal",
            "slideshare": {
                "key": "gBpn0tAOyHfRWw"
            },
            "youtube": {
                "key": "XDTK0ZhDQBc"
            },
            "id": "sascha_askani_1",
            "text": "<p>Continuous Delivery setzt auf die Automatisierung von Entwicklungs- und Betriebsprozessen, um die Performance und Qualität in der IT zu erhöhen. Mit Terraform zeigen die Referenten ein Tool, mit dessen Hilfe Infrastruktur effizient verwaltet werden kann.</p><p>Die Referenten demonstrieren live den Aufbau einer Cloud-Infrastruktur aus virtuellen Instanzen, Netzen, Loadbalancing und DNS bei Amazon AWS. Weiterhin gehen sie auf Herausforderungen und Vorteile (immutable Infrastructure) ein, die sich dadurch bei der Implementierung von Continuous-Delivery-Pipelines für die Entwicklung und den Betrieb ergeben.</p>",
            "feedback": "<p>Die Cloud bietet Infrastruktur für jedermann. Selbst kleine Projekte können zu geringen Preisen umfangreiche Systeme betreiben. Sascha Askani demonstrierte in seinem Vortrag eindrucksvoll, wie sich solche, zuweilen komplexe, Infrastrukturen in der Cloud mit <a href=\"https://www.terraform.io/\">Hashicorps Terraform</a> schnell und komfortabel als Infrastructure as Code entwickeln lassen. Ein Befehl und binnen weniger Minuten waren in der AWS VMs gestartet, miteinander vernetzt und fertig deployt. Einen weiteren Befehl später, war alles wieder abgebaut, um Kosten zu sparen.</p>"
        },
        {
            "description": "Zukunft des DevDay",
            "speaker": "Oliver Guhr",
            "room": "St. Petersburg"
        }
    ],
    "17:30 - 17:45": [
        {
            "description": " kurze Pause"
        }
    ],
    "17:45 - 18:45": [
        {
            "description": "Eine sprachneutrale Essenz der Microservices",
            "speaker": "Adam Bien",
            "room": "Hamburg",
            "slideshare": {
                "key": "K08mkov1dx9NGA"
            },
            "youtube": {
                "key": "9jW0muKd_U8"
            },
            "id": "adam_bien_1",
            "text": "<p>O.k. wir starten nun ein Microservice Projekt. Was ist genau zu tun? Wie startet man ein Projekt? Worauf ist zu achten? Was sind die wesentlichen Unterschiede zu der Prä-Microservice Ära? Brauchen wir doch Transaktionen? Was machen wir mit der DB? Gibt es shared Libraries?</p><br><p>In dieser Keynote werde ich möglichst konkret, allerdings garantiert ohne Java EE (=der perfekten Java EE Plattform :-)) Microservice Konzepte und Patterns wie Bulkheads, Circuit Breaker oder Tolerant Reader vorstellen. Fragen der Teilnehmer haben, wie immer, absolute Priorität und werden sofort beantwortet.</p>",
            "feedback": "<p>Einen tollen Abschluss der Vorträge bildete wie auch letztes Jahr die Keynote von Adam Bien - diesmal mit einer 'sprachneutralen Essenz der Microservices'. Sollen wir jetzt alle nur noch Microservices bauen? Machen Microservices alles besser? Ist das alles neu oder kennen wir Vieles von dem nicht bereits? Auf lockere Art und Weise vermittelte Adam den Teilnehmern anhand einer Vielzahl von Beispielen aus seinen Projekten die Vor- und Nachteile dieses Architekturmusters.</p>"
        }
    ],
    "18:45 - 20:30": [
        {
            "description": "Get together"
        }
    ]
}
